
7segment switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000646  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000333  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000da  00000000  00000000  00001383  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{unsigned char u8ct = 0 ;
unsigned char u7ct = 0 ;

	PORTC = 0 ;
  6c:	15 ba       	out	0x15, r1	; 21
	DDRC = 0;
  6e:	14 ba       	out	0x14, r1	; 20
	DDRC |= (1<< DDC4) | (1<< DDC5) | (1<< DDC6) | (1<< DDC7) | (1<< DDC2) |(1<<DDC3);
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8c 6f       	ori	r24, 0xFC	; 252
  74:	84 bb       	out	0x14, r24	; 20
#define F_CPU   16000000UL
#include <util/delay.h>

int main(void)
{unsigned char u8ct = 0 ;
unsigned char u7ct = 0 ;
  76:	90 e0       	ldi	r25, 0x00	; 0
#include <avr/io.h>
#define F_CPU   16000000UL
#include <util/delay.h>

int main(void)
{unsigned char u8ct = 0 ;
  78:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(u7ct <=9){
			PORTC |= (u7ct << 4);
			_delay_ms(5000);
			u7ct++;
			PORTC = (1<< PINC2) |(1<<PINC3);
  7a:	5c e0       	ldi	r21, 0x0C	; 12
	DDRC |= (1<< DDC4) | (1<< DDC5) | (1<< DDC6) | (1<< DDC7) | (1<< DDC2) |(1<<DDC3);
    /* Replace with your application code */
    while (1) 
    {
		if (u8ct <=9){
			PORTC = (1 << PINC2);
  7c:	64 e0       	ldi	r22, 0x04	; 4
	DDRC = 0;
	DDRC |= (1<< DDC4) | (1<< DDC5) | (1<< DDC6) | (1<< DDC7) | (1<< DDC2) |(1<<DDC3);
    /* Replace with your application code */
    while (1) 
    {
		if (u8ct <=9){
  7e:	8a 30       	cpi	r24, 0x0A	; 10
  80:	a0 f4       	brcc	.+40     	; 0xaa <main+0x3e>
			PORTC = (1 << PINC2);
  82:	65 bb       	out	0x15, r22	; 21
			PORTC |= (u8ct << 4);
  84:	45 b3       	in	r20, 0x15	; 21
  86:	70 e1       	ldi	r23, 0x10	; 16
  88:	87 9f       	mul	r24, r23
  8a:	90 01       	movw	r18, r0
  8c:	11 24       	eor	r1, r1
  8e:	24 2b       	or	r18, r20
  90:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	39 e6       	ldi	r19, 0x69	; 105
  96:	48 e1       	ldi	r20, 0x18	; 24
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	40 40       	sbci	r20, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
			_delay_ms(500);
			u8ct++;
  a4:	8f 5f       	subi	r24, 0xFF	; 255
			PORTC = (1<< PINC2) | (1<<PINC3);
  a6:	55 bb       	out	0x15, r21	; 21
  a8:	ea cf       	rjmp	.-44     	; 0x7e <main+0x12>
			

		}
		else if(u7ct <=9){
  aa:	9a 30       	cpi	r25, 0x0A	; 10
  ac:	a0 f4       	brcc	.+40     	; 0xd6 <main+0x6a>
			PORTC |= (u7ct << 4);
  ae:	45 b3       	in	r20, 0x15	; 21
  b0:	70 e1       	ldi	r23, 0x10	; 16
  b2:	97 9f       	mul	r25, r23
  b4:	90 01       	movw	r18, r0
  b6:	11 24       	eor	r1, r1
  b8:	24 2b       	or	r18, r20
  ba:	25 bb       	out	0x15, r18	; 21
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	33 e2       	ldi	r19, 0x23	; 35
  c0:	44 ef       	ldi	r20, 0xF4	; 244
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	40 40       	sbci	r20, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x56>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x60>
  cc:	00 00       	nop
			_delay_ms(5000);
			u7ct++;
  ce:	9f 5f       	subi	r25, 0xFF	; 255
			PORTC = (1<< PINC2) |(1<<PINC3);
  d0:	55 bb       	out	0x15, r21	; 21
			u8ct++;
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	d4 cf       	rjmp	.-88     	; 0x7e <main+0x12>
		}
		else 
		{
			PORTC |=0; 
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	85 bb       	out	0x15, r24	; 21
			u8ct = 0;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	d0 cf       	rjmp	.-96     	; 0x7e <main+0x12>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
